<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebFlux on </title>
    <link>/tags/webflux/</link>
    <description>Recent content in WebFlux on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/webflux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kboot Flux Meets Soap</title>
      <link>/posts/2020-05-10-kboot-flux-meets-soap/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-05-10-kboot-flux-meets-soap/</guid>
      <description>This will demonstrate how we can deal with a Blocking API in a Reactive World.
The GitHb 1 sample provides a
 soap-server who demonstrate the blocking downstream API. flux-client with REST API  lockdown that will call the blocking SOAP endpoint and. Blockhound 2 will throw an exception. easing have an implemented from Avoiding Reactor Meltdown 3 show case how to manage Blocking API.    With this approach to manage Blocking API in the same service ant not in a separate service we have all the nice features like retry filter map and so on in our Servive A from the Reactive Streams API.</description>
    </item>
    
  </channel>
</rss>