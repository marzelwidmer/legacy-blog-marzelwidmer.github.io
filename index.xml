<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>c3smonkey's blog</title><link>https://blog.marcelwidmer.org/</link><description>Recent content on c3smonkey's blog</description><image><url>https://blog.marcelwidmer.org/static</url><link>https://blog.marcelwidmer.org/static</link></image><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 24 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.marcelwidmer.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Axon Framework with MongoDB extension and Onion Architecture - Part 1</title><link>https://blog.marcelwidmer.org/blog/2022/2022-24-09-axon-mongodb-extention-part1/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2022/2022-24-09-axon-mongodb-extention-part1/</guid><description>AxonIQ - Spring Boot - MongoDB extension - CQRS</description></item><item><title>Privacy Policy</title><link>https://blog.marcelwidmer.org/legal/privacy/</link><pubDate>Thu, 21 Jan 2021 23:22:20 +0800</pubDate><guid>https://blog.marcelwidmer.org/legal/privacy/</guid><description>This is the privacy policy page for blog.marcelwidmer.org (Website.com)</description></item><item><title>Terms and Conditions</title><link>https://blog.marcelwidmer.org/legal/terms-and-conditions/</link><pubDate>Thu, 21 Jan 2021 23:22:20 +0800</pubDate><guid>https://blog.marcelwidmer.org/legal/terms-and-conditions/</guid><description>This is the terms and conditions page for Website Name (blog.marcelwidmer.org)</description></item><item><title>GitOps with Argo CD</title><link>https://blog.marcelwidmer.org/blog/2020/2020-10-05-gitops-argo/</link><pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2020/2020-10-05-gitops-argo/</guid><description>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Application definitions, configurations, and environments should be declarative and version controlled. Application deployment and lifecycle management should be automated, auditable, and easy to understand.
Minikube Setup Monitoring - Grafana-Prometheus Install Argo CD Create App on Argo CD Minikube Setup Local Development Environment with minikube.
Brew Installation Packages brew install hyperkit brew install minikube brew install helm brew install httpie brew install stern brew install argocd brew install sops OSX Minikube Test Cluster Hyperkit Setup first minikube hyperkit driver.</description></item><item><title>Harbor</title><link>https://blog.marcelwidmer.org/blog/2020/2020-10-05-harbor/</link><pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2020/2020-10-05-harbor/</guid><description>Harbor is an open source trusted cloud native registry project that stores, signs, and scans content. Harbor extends the open source Docker Distribution by adding the functionalities usually required by users such as security, identity and management. Having a registry closer to the build and run environment can improve the image transfer efficiency. Harbor supports replication of images between registries, and also offers advanced security features such as user management, access control and activity auditing.</description></item><item><title>Kubernetes Hazelcast Distributed Caching</title><link>https://blog.marcelwidmer.org/blog/2020/2020-10-04-hazelcast-k8s/</link><pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2020/2020-10-04-hazelcast-k8s/</guid><description>The sample code can be found on GitHub. 1
Precondition Spring Caching with Hazelcast Let&amp;rsquo;s get ready first our Spring Boot application with the following dependencies.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-cache&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Also let&amp;rsquo;s take the hazelcast-all from com.hazelcast that include the k8s dependencies. The version 4.x.x will also support yaml configuration of hazelcast.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.hazelcast&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hazelcast-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Let&amp;rsquo;s implement a real foo service with a super Chuck Norris API for the moment.</description></item><item><title>Kboot Flux Meets Soap</title><link>https://blog.marcelwidmer.org/blog/2020/2020-05-10-kboot-flux-meets-soap/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2020/2020-05-10-kboot-flux-meets-soap/</guid><description>This will demonstrate how we can deal with a Blocking API in a Reactive World.
The GitHb 1 sample provides a
soap-server who demonstrate the blocking downstream API. flux-client with REST API lockdown that will call the blocking SOAP endpoint and. Blockhound 2 will throw an exception. easing have an implemented from Avoiding Reactor Meltdown 3 show case how to manage Blocking API. With this approach to manage Blocking API in the same service ant not in a separate service we have all the nice features like retry filter map and so on in our Service A from the Reactive Streams API.</description></item><item><title>Apache Camel with Kotlin and Spring Boot</title><link>https://blog.marcelwidmer.org/blog/2020/2020-05-04-camel-kotlin-spring-boot/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2020/2020-05-04-camel-kotlin-spring-boot/</guid><description>Apache Camel is an open source integration framework that empowers you to quickly and easily integrate various systems consuming or producing data.
Precondition on OSX Create Project Check Camel Context File Route FTP Route Choice Route Precondition on OSX We will also use command line ftp commands for this you need the ftp command line tool this can be installed with :
brew install inetutils Create Project Run the following commands :</description></item><item><title>Kubernetes Ingress with Ngnix Ingress Controller</title><link>https://blog.marcelwidmer.org/blog/2020/2020-05-01-minikube-ingress-controller/</link><pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2020/2020-05-01-minikube-ingress-controller/</guid><description>OSX Minikube Kubernetes If you use ohmyzsh is there a nice Plugin with some kubectl for more details check ohmyzsh plugins kubectl
Install Minikube with Ingress Controller brew install minikube Start Minikube minikube start üòÑ minikube v1.9.2 on Darwin 10.15.4 ‚ñ™ MINIKUBE_ACTIVE_DOCKERD=minikube ‚ú® Using the hyperkit driver based on existing profile üëç Starting control plane node m01 in cluster minikube üîÑ Restarting existing hyperkit VM for &amp;#34;minikube&amp;#34; ... üê≥ Preparing Kubernetes v1.</description></item><item><title>Reactive Spring Boot with Resilience4j CircuitBreaker</title><link>https://blog.marcelwidmer.org/blog/2020/2020-04-18-resilience4j-circuitbreaker/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2020/2020-04-18-resilience4j-circuitbreaker/</guid><description>Create Project Let&amp;rsquo;s create a Sample Application with Kotlin and Reactive Spring Boot with the spring inializr Rest Endpoint. We will take the latest and greates Spring Boot version 2.3.0.M4 and language kotlin with the following dependencies:
actuator webflux cloud-resilience4j http https://start.spring.io/starter.tgz \ dependencies==actuator,webflux,cloud-resilience4j \ description==&amp;#34;Demo project Kotlin Spring Boot with Resilience4j&amp;#34; \ applicationName==Resilience4jApplication \ name==kboot-resilience4j \ groupId==ch.keepcalm \ artifactId==kboot-resilience4j \ packageName==ch.keepcalm.demo \ javaVersion==11 \ language==kotlin \ baseDir==kboot-resilience4j| tar -xzvf - Add Customer Banner</description></item><item><title>Spring Cloud Gateway</title><link>https://blog.marcelwidmer.org/blog/2020/2020-04-12-cloud-gateway-sidecar/</link><pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2020/2020-04-12-cloud-gateway-sidecar/</guid><description>This sample show how easy you can put on an existing API the Spring Cloud Gateway as kind of SideCar where you can manage your Security, Logging etc. Or just provide an other Endpoint URL like in this sample.
Let&amp;rsquo;s create a Service with a Reactive Spring Boot Application and MongoDB and a Rest Endpoint.
We start with the MongoDB document class Customer and a ReactiveCrudRepository interface CustomerRepository
@Document data class Customer(@Id val id: String = UUID.</description></item><item><title>Create Kotlin Project with Spring Initializr and HTTPie</title><link>https://blog.marcelwidmer.org/blog/2020/2020-04-12-spring-initializr/</link><pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2020/2020-04-12-spring-initializr/</guid><description>Create Kotlin Maven Project with HTTPie from start.spring.io Let&amp;rsquo;s create and extract a Maven Kotlin project with some dependencies actuator data-mongodb-reactive webflux and cloud-gateway The https://start.spring.io
http https://start.spring.io/starter.tgz \ dependencies==actuator,data-mongodb-reactive,webflux,cloud-gateway \ description==&amp;#34;Demo project Kotlin Sidecar Gateway&amp;#34; \ applicationName==SidecarGatewayApplication \ name==kotlin-sidecar-gateway \ groupId==ch.keepcalm \ artifactId==kotlin-sidecar-gateway \ packageName==ch.keepcalm.demo \ javaVersion==11 \ language==kotlin \ baseDir==kotlin-sidecar-gateway | tar -xzvf - Banner Download Banner in the src/main/resources folder.
http https://raw.githubusercontent.com/marzelwidmer/marzelwidmer.github.io/master/img/banner.txt \ &amp;gt; kotlin-sidecar-gateway/src/main/resources/banner.txt Spring Application Name Configure spring.</description></item><item><title>AxonIQ</title><link>https://blog.marcelwidmer.org/blog/2019/2019-10-22-axon/</link><pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2019/2019-10-22-axon/</guid><description>Commands:
A command tells our application to do something Events:
An event is a notification of something that has happened. Query:
Queries could be simplified by storing a copy of the data in a form easily In many cases, updating the query models can happen asynchronously from processing the transaction: eventual consistency Projection :
Optimized for the specific read use-cases (e.g. screens, API methods) Many separated ones instead of one big one Use carious technologies as appropriate (RDMS, Elastic, Mongo etc.</description></item><item><title>Promoting Applications Across Environments</title><link>https://blog.marcelwidmer.org/blog/2019/2019-08-28-multiple-project-promoting/</link><pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2019/2019-08-28-multiple-project-promoting/</guid><description>Create Project We are going to use the CLI to create some projects. Let&amp;rsquo;s create our projects first:
$ oc login $ oc new-project development --display-name=&amp;#34;Development Environment&amp;#34; $ oc new-project testing --display-name=&amp;#34;Testing Environment&amp;#34; $ oc new-project production --display-name=&amp;#34;Production Environment&amp;#34; $ oc new-project jenkins --display-name=&amp;#34;Jenkins CI/CD&amp;#34; Install Jenkins Create a Jenkins in the Jenkins CI/CD project with some storage. Take the Jenkins from the catalog and set some more memory and volume capacity on it.</description></item><item><title>Spring Boot Kubernetes ConfigMap</title><link>https://blog.marcelwidmer.org/blog/2019/2019-09-18-spring-boot-k8s-configmap/</link><pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2019/2019-09-18-spring-boot-k8s-configmap/</guid><description>Now is time to configure our microservices to send the tracing logs to Jaeger 1. The configuration opentracing.jaeger.http-sender.url in configuration application.yaml file looks like below in the sources.
opentracing: jaeger: log-spans: true http-sender: url: http://localhost:14268/api/traces The opentracing.jaeger.http-sender.url we are looking for we get form the section Get Route Host in the Jaeger post We will use the ConfigMap approach with the Spring Cloud Kubernetes{:target=&amp;quot;_blank&amp;quot;} starters.
Maven Update Maven Configuration with Spring Cloud Kubernetes{:target=&amp;quot;_blank&amp;quot;} library.</description></item><item><title>Spring Boot Kubernetes Discovery</title><link>https://blog.marcelwidmer.org/blog/2019/2019-09-21-spring-boot-k8s-ribbon-discovery/</link><pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2019/2019-09-21-spring-boot-k8s-ribbon-discovery/</guid><description>Spring Cloud Kubernetes Ribbon provide a mechanism to perform a client side load-balancing who is needed in a microservice architecture to allocate a list of all pods where our service is running (replicated)
This mechanism can automatically discover and reach all the endpoints of a specific service, and subsequently, it populates a Ribbon ServerList with information about the endpoints.
Let&amp;rsquo;s start by adding the spring-cloud-starter-kubernetes-ribbon dependency to our pom.xml file:</description></item><item><title>Semantic Release Delivery Pipeline</title><link>https://blog.marcelwidmer.org/blog/2019/2019-09-08-semantic-release-delivery-pipeline/</link><pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2019/2019-09-08-semantic-release-delivery-pipeline/</guid><description>Setup Deployment $ oc new-project development --display-nam e=&amp;#34;Development Environment&amp;#34; Deploy application with the maven.fabric8.io plugin in development stage from local machine.
$ ./mvnw fabric8:deploy -Dfabric8.namespace=development $ oc policy add-role-to-user edit system:serviceaccount:jenkins:jenkins -n development Create testing project and setup the roles.
$ oc new-project testing --display-name=&amp;#34;Testing Environment&amp;#34; $ oc policy add-role-to-user edit system:serviceaccount:jenkins:jenkins -n testing $ oc policy add-role-to-group system:image-puller system:serviceaccounts:testing \ -n development Create DeploymentConfiguration in testing stage.
$ oc create dc customer-service --image=docker-registry.</description></item><item><title>Jaeger - Distributed Tracing System</title><link>https://blog.marcelwidmer.org/blog/2019/2019-09-01-jaeger/</link><pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2019/2019-09-01-jaeger/</guid><description>As on-the-ground microservice practitioners are quickly realizing, the majority of operational problems that arise when moving to a distributed architecture are ultimately grounded in two areas: networking and observability. It is simply an orders of magnitude larger problem to network and debug a set of intertwined distributed services versus a single monolithic application. Jaeger Jaeger is a open source, end-to-end distributed tracing Monitor and troubleshoot transactions in complex distributed systems. CNCF Webinar Intro Jaeger{:target=&amp;quot;_blank&amp;quot;}</description></item><item><title>Certbot Let`s Encrypt</title><link>https://blog.marcelwidmer.org/blog/2019/2019-08-20-certbot-letsencrypt/</link><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2019/2019-08-20-certbot-letsencrypt/</guid><description>Inspiration from [Adding an SSL certificate to OKD - Part 2 of Installation of OKD 3.10 from start to finish]https://www.youtube.com/watch?v=S7HoJ09oYn0&amp;amp;feature=youtu.be){:target=&amp;quot;_blank&amp;quot;}
Check Certificate Let`s check first if there a certificate already for our domain https://crt.sh/?q=c3smonkey.ch
Check EPEL Reposittory Check if the epel.repo is enabled.
$ vi /etc/yum.repos.d/epel.repo [epel] name=Extra Packages for Enterprise Linux 7 - $basearch #baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;amp;arch=$basearch failovermethod=priority enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7 change enabled=0 to enabled=1 and quite and save the file with :qw</description></item><item><title>Install OKD on Hetzner Cloud</title><link>https://blog.marcelwidmer.org/blog/2019/2019-01-13-hetzner-okd/</link><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/blog/2019/2019-01-13-hetzner-okd/</guid><description>Inspiration from Installation of OKD 3.10 from start to finish
Create a Hetzner VM with the CLI https://github.com/hetznercloud/cli
hcloud (Hetzner CLI) Let&amp;rsquo;s check first some hcloud command that we can use later to create a VM with the right size and in the Datacenter we want.
hcloud server create --name &amp;lt;YOUR_DOMAIN&amp;gt; --type &amp;lt;SERVER-TYPE&amp;gt; --image &amp;lt;IMAGE&amp;gt; --ssh-key &amp;lt;YOUR_HETZNER_SSH_KEY&amp;gt; --datacenter &amp;lt;DATACENTER&amp;gt; Server Type hcloud server-type list ID NAME CORES MEMORY DISK STORAGE TYPE 1 cx11 1 2.</description></item><item><title>Contact Me</title><link>https://blog.marcelwidmer.org/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/contact/</guid><description>How can I help you?</description></item><item><title>Thanks</title><link>https://blog.marcelwidmer.org/thanks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.marcelwidmer.org/thanks/</guid><description>Thanks for the submission</description></item></channel></rss>