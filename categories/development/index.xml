<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on </title>
    <link>/categories/development/</link>
    <description>Recent content in Development on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kboot Flux Meets Soap</title>
      <link>/posts/2020-05-10-kboot-flux-meets-soap/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-05-10-kboot-flux-meets-soap/</guid>
      <description>This will demonstrate how we can deal with a Blocking API in a Reactive World.
The GitHb 1 sample provides a
 soap-server who demonstrate the blocking downstream API. flux-client with REST API  lockdown that will call the blocking SOAP endpoint and. Blockhound 2 will throw an exception. easing have an implemented from Avoiding Reactor Meltdown 3 show case how to manage Blocking API.    With this approach to manage Blocking API in the same service ant not in a separate service we have all the nice features like retry filter map and so on in our Service A from the Reactive Streams API.</description>
    </item>
    
    <item>
      <title>Apache Camel with Kotlin and Spring Boot</title>
      <link>/posts/2020-05-04-camel-kotlin-spring-boot/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-05-04-camel-kotlin-spring-boot/</guid>
      <description>Apache Camel is an open source integration framework that empowers you to quickly and easily integrate various systems consuming or producing data.
 Precondition on OSX Create Project Check Camel Context File Route FTP Route Choice Route  Precondition on OSX We will also use command line ftp commands for this you need the ftp command line tool this can be installed with :
brew install inetutils Create Project Run the following commands :</description>
    </item>
    
    <item>
      <title>Reactive Spring Boot with Resilience4j CircuitBreaker</title>
      <link>/posts/2020-04-18-resilience4j-circuitbreaker/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-04-18-resilience4j-circuitbreaker/</guid>
      <description>Create Project Let&amp;rsquo;s create a Sample Application with Kotlin and Reactive Spring Boot with the spring inializr Rest Endpoint. We will take the latest and greates Spring Boot version 2.3.0.M4 and language kotlin with the following dependencies:
 actuator webflux cloud-resilience4j  http https://start.spring.io/starter.tgz \ dependencies==actuator,webflux,cloud-resilience4j \ description==&amp;quot;Demo project Kotlin Spring Boot with Resilience4j&amp;quot; \ applicationName==Resilience4jApplication \ name==kboot-resilience4j \ groupId==ch.keepcalm \ artifactId==kboot-resilience4j \ packageName==ch.keepcalm.demo \ javaVersion==11 \ language==kotlin \ baseDir==kboot-resilience4j| tar -xzvf - Add Customer Banner</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway</title>
      <link>/posts/2020-04-12-cloud-gateway-sidecar/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-04-12-cloud-gateway-sidecar/</guid>
      <description>This sample show how easy you can put on an existing API the Spring Cloud Gateway as kind of SideCar where you can manage your Security, Logging etc. Or just provide an other Endpoint URL like in this sample.
Let&amp;rsquo;s create a Service with a Reactive Spring Boot Application and MongoDB and a Rest Endpoint.
We start with the MongoDB document class Customer and a ReactiveCrudRepository interface CustomerRepository
@Document data class Customer(@Id val id: String = UUID.</description>
    </item>
    
    <item>
      <title>Create Kotlin Project with Spring Initializr and HTTPie</title>
      <link>/posts/2020-04-12-spring-initializr/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-04-12-spring-initializr/</guid>
      <description>Create Kotlin Maven Project with HTTPie from start.spring.io Let&amp;rsquo;s create and extract a Maven Kotlin project with some dependencies actuator data-mongodb-reactive webflux and cloud-gateway The https://start.spring.io
http https://start.spring.io/starter.tgz \  dependencies==actuator,data-mongodb-reactive,webflux,cloud-gateway \  description==&amp;#34;Demo project Kotlin Sidecar Gateway&amp;#34; \  applicationName==SidecarGatewayApplication \  name==kotlin-sidecar-gateway \  groupId==ch.keepcalm \  artifactId==kotlin-sidecar-gateway \  packageName==ch.keepcalm.demo \  javaVersion==11 \  language==kotlin \  baseDir==kotlin-sidecar-gateway | tar -xzvf - Banner Download Banner in the src/main/resources folder.</description>
    </item>
    
  </channel>
</rss>