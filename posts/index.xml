<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes Hazelcast Distributed Caching</title>
      <link>/posts/2020-10-04-hazelcast-k8s/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-10-04-hazelcast-k8s/</guid>
      <description>The sample code can be found on GitHub. 1
Let&amp;rsquo;s get ready first our Spring Boot application with the following dependencies.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-cache&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; And also let&amp;rsquo;s take the hazelcast-all from com.hazelcast that include the k8s dependencies. The version 4.x.x will also support yaml configuration of hazelcast.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.hazelcast&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hazelcast-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Let&amp;rsquo;s implement a real foo service with a super Jack Norris API for the moment. The API will take a string on /api/[key] eg.</description>
    </item>
    
    <item>
      <title>Kboot Flux Meets Soap</title>
      <link>/posts/2020-05-10-kboot-flux-meets-soap/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-05-10-kboot-flux-meets-soap/</guid>
      <description>This will demonstrate how we can deal with a Blocking API in a Reactive World.
The GitHb 1 sample provides a
 soap-server who demonstrate the blocking downstream API. flux-client with REST API  lockdown that will call the blocking SOAP endpoint and. Blockhound 2 will throw an exception. easing have an implemented from Avoiding Reactor Meltdown 3 show case how to manage Blocking API.    With this approach to manage Blocking API in the same service ant not in a separate service we have all the nice features like retry filter map and so on in our Service A from the Reactive Streams API.</description>
    </item>
    
    <item>
      <title>Apache Camel with Kotlin and Spring Boot</title>
      <link>/posts/2020-05-04-camel-kotlin-spring-boot/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-05-04-camel-kotlin-spring-boot/</guid>
      <description>Apache Camel is an open source integration framework that empowers you to quickly and easily integrate various systems consuming or producing data.
 Precondition on OSX Create Project Check Camel Context File Route FTP Route Choice Route  Precondition on OSX We will also use command line ftp commands for this you need the ftp command line tool this can be installed with :
brew install inetutils Create Project Run the following commands :</description>
    </item>
    
    <item>
      <title>Kubernetes Ingress with Ngnix Ingress Controller</title>
      <link>/posts/2020-05-01-minikube-ingress-controller/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-05-01-minikube-ingress-controller/</guid>
      <description>OSX Minikube Kubernetes If you use ohmyzsh is there a nice Plugin with some kubectl for more details check ohmyzsh plugins kubectl
Install Minikube with Ingress Controller brew install minikube Start Minikube minikube start üòÑ minikube v1.9.2 on Darwin 10.15.4 ‚ñ™ MINIKUBE_ACTIVE_DOCKERD=minikube ‚ú® Using the hyperkit driver based on existing profile üëç Starting control plane node m01 in cluster minikube üîÑ Restarting existing hyperkit VM for &amp;#34;minikube&amp;#34; ... üê≥ Preparing Kubernetes v1.</description>
    </item>
    
    <item>
      <title>Reactive Spring Boot with Resilience4j CircuitBreaker</title>
      <link>/posts/2020-04-18-resilience4j-circuitbreaker/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-04-18-resilience4j-circuitbreaker/</guid>
      <description>Create Project Let&amp;rsquo;s create a Sample Application with Kotlin and Reactive Spring Boot with the spring inializr Rest Endpoint. We will take the latest and greates Spring Boot version 2.3.0.M4 and language kotlin with the following dependencies:
 actuator webflux cloud-resilience4j  http https://start.spring.io/starter.tgz \ dependencies==actuator,webflux,cloud-resilience4j \ description==&amp;quot;Demo project Kotlin Spring Boot with Resilience4j&amp;quot; \ applicationName==Resilience4jApplication \ name==kboot-resilience4j \ groupId==ch.keepcalm \ artifactId==kboot-resilience4j \ packageName==ch.keepcalm.demo \ javaVersion==11 \ language==kotlin \ baseDir==kboot-resilience4j| tar -xzvf - Add Customer Banner</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway</title>
      <link>/posts/2020-04-12-cloud-gateway-sidecar/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-04-12-cloud-gateway-sidecar/</guid>
      <description>This sample show how easy you can put on an existing API the Spring Cloud Gateway as kind of SideCar where you can manage your Security, Logging etc. Or just provide an other Endpoint URL like in this sample.
Let&amp;rsquo;s create a Service with a Reactive Spring Boot Application and MongoDB and a Rest Endpoint.
We start with the MongoDB document class Customer and a ReactiveCrudRepository interface CustomerRepository
@Document data class Customer(@Id val id: String = UUID.</description>
    </item>
    
    <item>
      <title>Create Kotlin Project with Spring Initializr and HTTPie</title>
      <link>/posts/2020-04-12-spring-initializr/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020-04-12-spring-initializr/</guid>
      <description>Create Kotlin Maven Project with HTTPie from start.spring.io Let&amp;rsquo;s create and extract a Maven Kotlin project with some dependencies actuator data-mongodb-reactive webflux and cloud-gateway The https://start.spring.io
http https://start.spring.io/starter.tgz \  dependencies==actuator,data-mongodb-reactive,webflux,cloud-gateway \  description==&amp;#34;Demo project Kotlin Sidecar Gateway&amp;#34; \  applicationName==SidecarGatewayApplication \  name==kotlin-sidecar-gateway \  groupId==ch.keepcalm \  artifactId==kotlin-sidecar-gateway \  packageName==ch.keepcalm.demo \  javaVersion==11 \  language==kotlin \  baseDir==kotlin-sidecar-gateway | tar -xzvf - Banner Download Banner in the src/main/resources folder.</description>
    </item>
    
    <item>
      <title>Promoting Applications Across Environments</title>
      <link>/posts/2019-08-28-multiple-project-promoting/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019-08-28-multiple-project-promoting/</guid>
      <description>Table of contents  Create Project Install Jenkins / Install Jenkins With CLI Add Edit Role To ServiceAccount Jenkins Add Role To Group Deploy Application Development Environment Deployment  Test API Testing Environment Deployment Production Environment Deployment Jenkins Pipeline WebHooks  Create Project  We are going to use the CLI to create some projects. Let&amp;rsquo;s create our projects first:
$ oc login $ oc new-project development --display-name=&amp;#34;Development Environment&amp;#34; $ oc new-project testing --display-name=&amp;#34;Testing Environment&amp;#34; $ oc new-project production --display-name=&amp;#34;Production Environment&amp;#34; $ oc new-project jenkins --display-name=&amp;#34;Jenkins CI/CD&amp;#34; Install Jenkins  Create a Jenkins in the Jenkins CI/CD project with some storage.</description>
    </item>
    
    <item>
      <title>Spring Boot Kubernetes ConfigMap</title>
      <link>/posts/2019-09-18-spring-boot-k8s-configmap/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019-09-18-spring-boot-k8s-configmap/</guid>
      <description>Now is time to configure our microservices to send the tracing logs to Jaeger 1. The configuration opentracing.jaeger.http-sender.url in configuration application.yaml file looks like below in the sources.
opentracing: jaeger: log-spans: true http-sender: url: http://localhost:14268/api/traces The opentracing.jaeger.http-sender.url we are looking for we get form the section Get Route Host in the Jaeger post We will use the ConfigMap approach with the Spring Cloud Kubernetes{:target=&amp;quot;_blank&amp;quot;} starters.
Maven  Update Maven Configuration with Spring Cloud Kubernetes{:target=&amp;quot;_blank&amp;quot;} library.</description>
    </item>
    
    <item>
      <title>Spring Boot Kubernetes Discovery</title>
      <link>/posts/2019-09-21-spring-boot-k8s-ribbon-discovery/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019-09-21-spring-boot-k8s-ribbon-discovery/</guid>
      <description>Spring Cloud Kubernetes Ribbon provide a mechanism to perform a client side load-balancing who is needed in a microservice architecture to allocate a list of all pods where our service is running (replicated)
This mechanism can automatically discover and reach all the endpoints of a specific service, and subsequently, it populates a Ribbon ServerList with information about the endpoints.
Let&amp;rsquo;s start by adding the spring-cloud-starter-kubernetes-ribbon dependency to our pom.xml file:</description>
    </item>
    
    <item>
      <title>Semantic Release Delivery Pipeline</title>
      <link>/posts/2019-09-08-semantic-release-delivery-pipeline/</link>
      <pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019-09-08-semantic-release-delivery-pipeline/</guid>
      <description>Table of contents  Setup Deployment Jenkins Pipeline WebHooks Private Repository Semantic Release Jenkins Pipeline  Setup Deployment  $ oc new-project development --display-nam e=&amp;#34;Development Environment&amp;#34; Deploy application with the maven.fabric8.io plugin in development stage from local machine.
$ ./mvnw fabric8:deploy -Dfabric8.namespace=development $ oc policy add-role-to-user edit system:serviceaccount:jenkins:jenkins -n development Create testing project and setup the roles.
$ oc new-project testing --display-name=&amp;#34;Testing Environment&amp;#34; $ oc policy add-role-to-user edit system:serviceaccount:jenkins:jenkins -n testing $ oc policy add-role-to-group system:image-puller system:serviceaccounts:testing \  -n development Create DeploymentConfiguration in testing stage.</description>
    </item>
    
    <item>
      <title>Install OKD on Hetzner Cloud</title>
      <link>/posts/2019-01-13-hetzner-okd/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019-01-13-hetzner-okd/</guid>
      <description>Inspiration from Installation of OKD 3.10 from start to finish
Create a Hetzner VM with the CLI https://github.com/hetznercloud/cli
hcloud (Hetzner CLI) Let&amp;rsquo;s check first some hcloud command that we can use later to create a VM with the right size and in the Datacenter we want.
hcloud server create --name &amp;lt;YOUR_DOMAIN&amp;gt; --type &amp;lt;SERVER-TYPE&amp;gt; --image &amp;lt;IMAGE&amp;gt; --ssh-key &amp;lt;YOUR_HETZNER_SSH_KEY&amp;gt; --datacenter &amp;lt;DATACENTER&amp;gt; Server Type hcloud server-type list ID NAME CORES MEMORY DISK STORAGE TYPE 1 cx11 1 2.</description>
    </item>
    
  </channel>
</rss>
